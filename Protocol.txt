Controller to Engine: ->
Engine to Controller: <-

-> HELLO
<- HELLO
-> RULES
   GRID ( sizeX, sizeY )
   SHIPS numOfShips:[ ( "name", (xStart, yStart), (xEnd, yEnd)), ...]
   REPORT_DESTROY 1/0
   REPORT_SHIP_ON_HIT 1/0
   REPREAT_ON_HIT 1/0
<- OK
-> NEW_GAME
<- PLACEMENT numOfShips:[ ("name", (xStart,yStart), (xEnd, yEnd)), ...]

Loop untill game finished:

  Loop untill result is MISS:
    -> YOUR_TURN
    <- POINT (x,y)
    -> RESULT ( HIT/MISS/DESTROY , "name")
    <- OK
  End Loop

  -> OPPONENT_TURNS [(x1,y1), ...]
  <- OK
End loop

-> GAME_FINISHED
<- OK


Example of protocol implementation in C++ for Engine:
    EngineReceiver receiver;
    receiver.SetInput(STDIN_FILENO);
    EngineSender sender;
    sender.SetOutput(STDOUT_FILENO);

    receiver.ReceiveHello();
    sender.SendHello("maratAlgo");

    receiver.ReceiveRules(rules);
    sender.SendOK();

    receiver.ReceiveNewGame();
    sender.SendPlacement(rules.ships);

    receiver.ReceiveYourTurn();
    sender.SendPoint(Point());
    receiver.ReceiveResult(result);
    sender.SendOK();

    std::vector<Point> points;
    receiver.ReceiveOpponentTurns(points);
    sender.SendOK();


    ResultGame resultGame;
    receiver.ReceiveGameFinished(resultGame);
    sender.SendOK();

